#include <u16>




fn sub_with_flag(struct u16 self, cell other, cell _carried) {
  copy other {
    if not self.n0 {
      if not self.n1 {
        _carried = true;
      }
      self.n1 -= 1;
    }
    self.n0 -= 1;
  }
}

fn is_zero(struct u16 self, cell _is_zero) {
  _is_zero = true;
  if self.n0 {
    _is_zero = false;
  }
  if self.n1 {
    _is_zero = false;
  }
}

fn divisible(struct u16 dividend, cell divisor, cell _divisible) {
  struct u16 a; set(a, dividend);
  _divisible = true;
  cell dividing = true;
  while dividing {
    cell carried;
    sub_with_flag(a, divisor, carried);
    if carried {
      dividing = false;
      _divisible = false;
    }
    cell foo;
    is_zero(a, foo);
    if foo {
      dividing = false;
    }
  }
}




fn print_if_prime(struct u16 n) {
  cell _n = n.n0 - 2;
  if n.n1 {
    _n = 97;
  }
  cell iterating = true;
  cell is_prime = true;
  cell i = 2;
  // for i in 2..n
  while iterating {
    {cell d; divisible(n, i, d); if d {is_prime = false;}}
    
    ++i;
    --_n;
    if not _n {
      iterating = false;
    }
    if not is_prime {
      iterating = false;
    }
  }

  if is_prime {
    print(n);
    output 10;
  }
}




fn main() {
  output "2\n";
  struct u16 n; n.n0 = 3;
  drain 49 {
    drain 102 {
      print_if_prime(n);
      inc(n);
      inc(n);
    }
  }
}

main();
