#include <u16>

fn println(struct u16 self) {
  print(n);
  output '\n';
}

fn sub_with_flag(struct u16 self, struct u16 other, cell _carried) {
  copy other.n1 {
    if not self.n1 {
      _carried = true;
    }
    self.n1 -= 1;
  }
  copy other.n0 {
    if not self.n0 {
      if not self.n1 {
        _carried = true;
      }
      self.n1 -= 1;
    }
    self.n0 -= 1;
  }
}

fn is_zero(struct u16 self, cell _is_zero) {
  _is_zero = true;
  if self.n0 {
    _is_zero = false;
  }
  if self.n1 {
    _is_zero = false;
  }
}

fn divisible(struct u16 dividend, struct u16 divisor, cell _divisible) {
// output" b:";print(divisor);output" (";debug(divisor);output")\n";
  struct u16 a; set(a, dividend);
  _divisible = true;
  cell dividing = true;
  while dividing {
    cell carried;
// output" a:";print(a);output" (";debug(a);output")\n";
    sub_with_flag(a, divisor, carried);
// output" a':";print(a);output" (";debug(a);output")\n";
// output" c:";print(carried);output" (";debug(carried);output")\n";
    if carried {
      dividing = false;
      _divisible = false;
    }
    cell foo;
    is_zero(a, foo);
// output" foo:";print(foo);output" (";debug(foo);output")\n";
    if foo {
      dividing = false;
    }
  }
// output "---------------------\n";
}

struct u16 n;
drain 100 {
  drain 100 {
    inc(n);
// output "\n+ + + + + + + + + + + + + + + + + + + + + + + + +\n";
// output"n:";print(n);output" (";debug(n);output")\n";

    struct u16 i; set(i, n);
    cell factors = 0;
    cell nez = 1;
    while nez {
      cell divisible;
      divisible(n, i, divisible);
      if divisible {
        factors += 1;
      }
      dec(i);
      ne_zero(i, nez);
    }


    if not factors - 2 {
      println(n);
    }
// output "= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n";
  }
}
