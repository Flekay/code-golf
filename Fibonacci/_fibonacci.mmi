let N = 1; // = 31
drain 5 { N += 6; }

let buf[36] @1; // = [ [display?, aDigit, bDigit, temp, temp, temp] * 6 ]
buf[0] = 1;
buf[1] = 1;
buf[2] = -1;
// a = 1; b = -1;
// this is so that it prints 0 on the first loop

drain N {
  // do the fibonacci shuffle
  // temp = a;
  // a = a + b;
  // b = temp;
  // or thereabouts:
  bf @1 {
    [
      {
        // map the current element cells to variables
        let shouldDisplay @0;
        let aDigit @1;
        let bDigit @2;
        assert shouldDisplay equals 1;
        assert aDigit unknown;
        assert bDigit unknown;
        // same for the next element
        let nextDisplay @6;
        let nextA @7;
        let nextB @8;
        assert nextDisplay unknown;
        assert nextA unknown;
        assert nextB unknown;

        {
          let temp;
          drain aDigit into temp bDigit;
          
          let tens = 10; // basically a mod 10 check value
          drain bDigit into aDigit {
            tens -= 1;
            // if not causes like 2 allocations FYI
            if not tens {
              aDigit -= 10;
              // carry
              nextB += 1;
              // make sure the print logic knows this digit has been reached
              nextDisplay = 1;
            }
          }
          drain temp into bDigit;
        }
        
      }
      >>>>>>
    ]<<<<<<

    // now print a:  
    // start at the most significant digit (last in the array)
    // check the "display?" byte to see if this digit has been reached yet
    [
      {
        let shouldDisplay @0;
        let aDigit @1;
        let bDigit @2;
        assert aDigit unknown;
        assert bDigit unknown;
        assert shouldDisplay equals 1;

        {
          let c = aDigit; // + '0'
          drain 8 { c += 6; }
          output c;
        }
      }
      <<<<<<
    ]
    // print newline
    {
      output '\n';
    }
    // return to the start
    >>>>>>
  }
}